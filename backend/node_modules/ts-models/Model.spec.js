"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Model_1 = require('./Model');
var decorators_1 = require('./decorators');
var Product = (function (_super) {
    __extends(Product, _super);
    function Product(attributes) {
        _super.call(this, attributes);
        this.attributes = attributes;
    }
    return Product;
}(Model_1.Model));
describe('Model', function () {
    describe('Checking the Model functionality', function () {
        it('Commit method should work correctly', function () {
            var product = new Product({
                id: 100,
                name: 'Name1',
                description: 'Description1',
                exists: true
            });
            var mutableAttributes = product.toAttributes();
            mutableAttributes.description = 'Changed description1';
            mutableAttributes.exists = false;
            expect(Object.keys(product.getChanges())).toEqual(['description', 'exists']);
            product.start();
            product.commit();
            expect(Object.keys(product.getChanges())).toEqual([]);
            expect(product.toJSON().description).toEqual('Changed description1');
            var virtualProduct1 = product.toVirtualModel();
            var virtualProduct2 = product.toVirtualModel();
            var mutableVirtualAttributes1 = virtualProduct1.toAttributes();
            var mutableVirtualAttributes2 = virtualProduct2.toAttributes();
            mutableVirtualAttributes1.description = 'Changed description2';
            mutableVirtualAttributes2.description = 'Changed description3';
            expect(virtualProduct1.getChanges().description).toEqual('Changed description2');
            expect(virtualProduct2.getChanges().description).toEqual('Changed description3');
            expect(product.toJSON().description).toEqual('Changed description1');
        });
        it('Rollback method should work correctly', function () {
            var product = new Product({
                id: 100,
                name: 'Name1',
                description: 'Description1',
                exists: true
            });
            expect(Object.keys(product.getChanges())).toEqual([]);
            product.setFieldValue('name', 'Name2');
            expect(Object.keys(product.getChanges())).toEqual(['name']);
            product.start();
            product.rollback();
            expect(Object.keys(product.getChanges())).toEqual([]);
        });
        it('Decorators should work correctly', function () {
            var ViewModel = (function () {
                function ViewModel(_model) {
                    this._model = _model;
                }
                Object.defineProperty(ViewModel.prototype, "sourceModel", {
                    get: function () {
                        return this._model;
                    },
                    enumerable: true,
                    configurable: true
                });
                __decorate([
                    decorators_1.ViewField(), 
                    __metadata('design:type', String)
                ], ViewModel.prototype, "name", void 0);
                __decorate([
                    decorators_1.ViewSourceModel(), 
                    __metadata('design:type', Product)
                ], ViewModel.prototype, "sourceModel", null);
                return ViewModel;
            }());
            var product = new Product({
                id: 100,
                name: 'Name1',
                description: 'Description1',
                exists: true
            });
            var viewModel = new ViewModel(product);
            // Binding via UI-framework
            viewModel.name = 'Name2';
            expect(product.getFieldValue('name')).toEqual('Name2');
            expect(product.toAttributes().name).toEqual('Name2');
            expect(Object.keys(product.getChanges())).toEqual(['name']);
        });
    });
});
//# sourceMappingURL=Model.spec.js.map