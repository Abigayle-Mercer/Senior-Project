"use strict";
var index_1 = require('ts-smart-logger/index');
var index_2 = require('ts-metadata-helper/index');
var Utils_1 = require('./Utils');
var ViewSourceModelMetadata = (function () {
    function ViewSourceModelMetadata() {
    }
    return ViewSourceModelMetadata;
}());
exports.ViewSourceModelMetadata = ViewSourceModelMetadata;
exports.ViewSourceModel = index_2.PropertyAnnotationFactory(ViewSourceModelMetadata);
var ViewSourceModelPropertyLookupService = (function () {
    function ViewSourceModelPropertyLookupService(target) {
        this.target = target;
    }
    ViewSourceModelPropertyLookupService.prototype.lookup = function () {
        if (Utils_1.Utils.isPresent(this.annotatedProperty)) {
            return this.annotatedProperty;
        }
        var annotatedProperties = Object.keys(index_2.MetadataHelper.findPropertyMetadata(this.target, exports.ViewSourceModel));
        if (annotatedProperties.length === 0) {
            ViewSourceModelPropertyLookupService.logger.warn('[$ViewSourceModelPropertyLookupService] Source model is not found for the target', this.target, '. You forgot define @ViewSourceModel for source model property');
            return null;
        }
        else if (annotatedProperties.length > 1) {
            ViewSourceModelPropertyLookupService.logger.warn('[$ViewSourceModelPropertyLookupService] There is more than one source model');
        }
        return this.annotatedProperty = annotatedProperties[0];
    };
    ViewSourceModelPropertyLookupService.logger = index_1.LoggerFactory.makeLogger(ViewSourceModelPropertyLookupService);
    return ViewSourceModelPropertyLookupService;
}());
exports.ViewField = function (metadata) {
    return function (target, propertyKey, descriptor) {
        var lookupService = new ViewSourceModelPropertyLookupService(target);
        var toModel = function (view, annotatedProperty) { return view[annotatedProperty]; };
        var toViewPropertyKey = function (propertyKey) {
            return Utils_1.Utils.isBlank(metadata) || Utils_1.Utils.isBlank(metadata.mapping)
                ? propertyKey
                : metadata.mapping;
        };
        Reflect.defineProperty(target, propertyKey, {
            set: function (value) {
                var annotatedProperty = lookupService.lookup();
                if (Utils_1.Utils.isPresent(annotatedProperty)) {
                    toModel(this, annotatedProperty).setFieldValue(toViewPropertyKey(propertyKey), value);
                }
            },
            get: function () {
                var annotatedProperty = lookupService.lookup();
                return Utils_1.Utils.isBlank(annotatedProperty)
                    ? undefined
                    : toModel(this, annotatedProperty).getFieldValue(toViewPropertyKey(propertyKey));
            }
        });
        return descriptor;
    };
};
//# sourceMappingURL=decorators.js.map