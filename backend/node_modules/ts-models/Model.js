"use strict";
var index_1 = require('ts-immutable-helper/index');
var ModelState_1 = require('./ModelState');
var Utils_1 = require('./Utils');
var Model = (function () {
    function Model(attributes) {
        this.state = new ModelState_1.ModelState();
        this.attributes = attributes || {};
    }
    /**
     * @override
     */
    Model.prototype.setFieldValue = function (fieldName, fieldValue) {
        if (this.attributes[fieldName] === fieldValue) {
            this.state.setFieldValue(fieldName, undefined);
        }
        else {
            this.state.setFieldValue(fieldName, fieldValue);
        }
        return this;
    };
    /**
     * @override
     */
    Model.prototype.getFieldValue = function (fieldName, defaultValue) {
        var stateValue = this.state.getFieldValue(fieldName);
        if (Utils_1.Utils.isUndefined(stateValue)) {
            var attributesValue = this.attributes[fieldName];
            if (Utils_1.Utils.isUndefined(attributesValue)) {
                var scopeValue = this[fieldName];
                if (Utils_1.Utils.isUndefined(scopeValue)) {
                    return defaultValue;
                }
                return scopeValue;
            }
            else {
                return attributesValue;
            }
        }
        else {
            return stateValue;
        }
    };
    /**
     * @override
     */
    Model.prototype.getChanges = function () {
        return this.state.getChanges();
    };
    /**
     * @override
     */
    Model.prototype.hasChanges = function () {
        return this.state.hasChanges();
    };
    /**
     * @override
     */
    Model.prototype.isRemovingInProgress = function () {
        return this.state.isRemovingInProgress();
    };
    /**
     * @override
     */
    Model.prototype.isRemoved = function () {
        return this.state.isRemoved();
    };
    /**
     * @override
     */
    Model.prototype.isRunning = function () {
        return this.state.isRunning();
    };
    /**
     * @override
     */
    Model.prototype.remove = function () {
        this.state.remove();
    };
    /**
     * @override
     */
    Model.prototype.restore = function () {
        this.state.restore();
    };
    /**
     * @override
     */
    Model.prototype.commit = function () {
        var savedAttributes = this.state.commit();
        if (Utils_1.Utils.isPresent(savedAttributes)) {
            /**
             * Apply saved values from state to the attributes of model.
             * The attributes - in fact, are a mirror of model state on the server
             */
            Object.assign(this.attributes, savedAttributes);
        }
        return savedAttributes;
    };
    /**
     * @override
     */
    Model.prototype.rollback = function () {
        this.state.rollback();
    };
    /**
     * @override
     */
    Model.prototype.stop = function () {
        this.state.stop();
    };
    /**
     * @override
     */
    Model.prototype.start = function () {
        this.state.start();
    };
    /**
     * @override
     */
    Model.prototype.getId = function () {
        return this.getFieldValue('id', null);
    };
    /**
     * @override
     */
    Model.prototype.toJSON = function () {
        return index_1.ImmutableHelper.toImmutable(this.attributes);
    };
    /**
     * @override
     */
    Model.prototype.toAttributes = function () {
        var _this = this;
        var decoratedJSON = {};
        Reflect.ownKeys(this.attributes).forEach(function (attributeName) {
            Reflect.defineProperty(decoratedJSON, attributeName, {
                set: function (value) { return _this.setFieldValue(attributeName, value); },
                get: function () { return _this.getFieldValue(attributeName); }
            });
        });
        return decoratedJSON;
    };
    /**
     * @override
     */
    Model.prototype.toVirtualModel = function () {
        return Reflect.construct(this.constructor, [this.attributes]);
    };
    return Model;
}());
exports.Model = Model;
//# sourceMappingURL=Model.js.map