import { IModelState } from './IModelState';
import { AsyncState } from './AsyncState';
export declare class ModelState<TAttributes extends {
    [index: string]: any;
}> extends AsyncState implements IModelState {
    private static logger;
    private removed;
    private pendingValues;
    private values;
    /**
     * @override
     */
    setFieldValue(fieldName: string, fieldValue: any): IModelState;
    /**
     * @override
     */
    getFieldValue(fieldName: string): any;
    /**
     * @override
     */
    isRemovingInProgress(): boolean;
    /**
     * The model has been removed on the server side if and only if the method return true and the model has no the running state
     *
     * @override
     */
    isRemoved(): boolean;
    /**
     * @override
     */
    remove(): void;
    /**
     * The consistent state has restored between the client and the server: the model still exists on the server and process has stopped
     *
     * @override
     */
    restore(): void;
    /**
     * @override
     */
    commit(): TAttributes;
    /**
     * @override
     */
    rollback(): void;
    /**
     * @override
     */
    getChanges(): TAttributes;
    /**
     * @override
     */
    hasChanges(): boolean;
}
