import { IModel } from './IModel';
import { IModelAttributes } from './IModelAttributes';
export declare class Model<TAttributes> implements IModel, IModelAttributes<TAttributes> {
    private state;
    protected attributes: TAttributes;
    constructor(attributes: TAttributes);
    /**
     * @override
     */
    setFieldValue(fieldName: string, fieldValue: any): IModel;
    /**
     * @override
     */
    getFieldValue(fieldName: string, defaultValue?: any): any;
    /**
     * @override
     */
    getChanges(): TAttributes;
    /**
     * @override
     */
    hasChanges(): boolean;
    /**
     * @override
     */
    isRemovingInProgress(): boolean;
    /**
     * @override
     */
    isRemoved(): boolean;
    /**
     * @override
     */
    isRunning(): boolean;
    /**
     * @override
     */
    remove(): void;
    /**
     * @override
     */
    restore(): void;
    /**
     * @override
     */
    commit(): TAttributes;
    /**
     * @override
     */
    rollback(): void;
    /**
     * @override
     */
    stop(): void;
    /**
     * @override
     */
    start(): void;
    /**
     * @override
     */
    getId(): any;
    /**
     * @override
     */
    toJSON(): TAttributes;
    /**
     * @override
     */
    toAttributes(): TAttributes;
    /**
     * @override
     */
    toVirtualModel<TModel extends IModel>(): TModel;
}
