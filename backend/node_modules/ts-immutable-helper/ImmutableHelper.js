"use strict";
var ImmutableHelper = (function () {
    function ImmutableHelper() {
    }
    ImmutableHelper.observe = function (object, freeze) {
        if (typeof object === 'undefined' || object === null) {
            return object;
        }
        var copied;
        if (Array.isArray(object)) {
            copied = [];
            object.forEach(function (i) {
                copied.push(ImmutableHelper.observe(i, freeze));
            });
        }
        else if (typeof object === 'object') {
            copied = Reflect.construct(object.constructor, []);
            for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {
                var i = _a[_i];
                copied[i] = ImmutableHelper.observe(object[i], freeze);
            }
        }
        else {
            return object;
        }
        return freeze
            ? Object.isFrozen(copied) ? copied : Object.freeze(copied)
            : copied;
    };
    ImmutableHelper.toImmutable = function (object) {
        return ImmutableHelper.observe(object, true);
    };
    ImmutableHelper.toClone = function (object) {
        return ImmutableHelper.observe(object, false);
    };
    return ImmutableHelper;
}());
exports.ImmutableHelper = ImmutableHelper;
//# sourceMappingURL=ImmutableHelper.js.map