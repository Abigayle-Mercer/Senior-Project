"use strict";
var ImmutableHelper_1 = require('./ImmutableHelper');
describe('ImmutableHelper', function () {
    describe('Checking the main methods of the ImmutableHelper', function () {
        it('The input object should be frozen and cloned successfully', function () {
            var clonedObject = {
                a: 1,
                b: 2,
                c: {
                    d: 3,
                    e: {
                        f: 4,
                        g: 'hello world',
                        h: true,
                        i: [
                            {
                                a: 1,
                                b: 2,
                                c: [
                                    {
                                        d: 3
                                    }
                                ],
                                e: null,
                                f: undefined
                            }
                        ]
                    }
                }
            };
            expect(ImmutableHelper_1.ImmutableHelper.toClone(clonedObject)).toEqual(clonedObject);
            expect(ImmutableHelper_1.ImmutableHelper.toImmutable(clonedObject)).toEqual(clonedObject);
            try {
                ImmutableHelper_1.ImmutableHelper.toImmutable(clonedObject)['c']['param'] = 0;
            }
            catch (e) {
                expect(e.message).toEqual("Can't add property param, object is not extensible");
            }
        });
        it('The input array should be frozen and cloned successfully', function () {
            var clonedObject = [
                {
                    a: 1,
                    b: 2,
                    c: {
                        d: 3,
                        e: {
                            f: 4,
                            g: 'hello world',
                            h: true,
                            i: [
                                {
                                    a: 1,
                                    b: 2,
                                    c: [
                                        {
                                            d: 3
                                        }
                                    ],
                                    e: null,
                                    f: undefined
                                }
                            ]
                        }
                    }
                }
            ];
            expect(ImmutableHelper_1.ImmutableHelper.toClone(clonedObject)).toEqual(clonedObject);
            expect(ImmutableHelper_1.ImmutableHelper.toImmutable(clonedObject)).toEqual(clonedObject);
            try {
                ImmutableHelper_1.ImmutableHelper.toImmutable(clonedObject).push(0);
            }
            catch (e) {
                expect(e.message).toEqual("Can't add property 1, object is not extensible");
            }
        });
        it('The input user object should be frozen and cloned successfully', function () {
            var Person = (function () {
                function Person(name, id) {
                    this.name = name;
                    this.id = id;
                }
                Person.prototype.getName = function () {
                    return this.name;
                };
                Person.prototype.setName = function (name) {
                    this.name = name;
                };
                return Person;
            }());
            var clonedPerson = ImmutableHelper_1.ImmutableHelper.toClone(new Person("Tomas", 123));
            expect(clonedPerson instanceof Person).toBe(true);
            expect(clonedPerson.getName).toEqual(Person.prototype.getName);
            var frozenPerson = ImmutableHelper_1.ImmutableHelper.toImmutable(new Person("Tomas", 456));
            expect(frozenPerson instanceof Person).toBe(true);
            expect(frozenPerson.getName).toEqual(Person.prototype.getName);
            try {
                frozenPerson.setName('Nelson');
            }
            catch (e) {
                expect(e.message).toEqual("Cannot assign to read only property 'name' of object '#<Person>'");
            }
        });
    });
});
//# sourceMappingURL=ImmutableHelper.spec.js.map