import {ImmutableHelper} from './ImmutableHelper';

describe('ImmutableHelper', ()=> {

	describe('Checking the main methods of the ImmutableHelper', ()=> {

		it('The input object should be frozen and cloned successfully', ()=> {

			const clonedObject = {
				a: 1,
				b: 2,
				c: {
					d: 3,
					e: {
						f: 4,
						g: 'hello world',
						h: true,
						i: [
							{
								a: 1,
								b: 2,
								c: [
									{
										d: 3
									}
								],
								e: null,
								f: undefined
							}
						]
					}
				}
			};

			expect(ImmutableHelper.toClone(clonedObject)).toEqual(clonedObject);
			expect(ImmutableHelper.toImmutable(clonedObject)).toEqual(clonedObject);

			try {
				ImmutableHelper.toImmutable(clonedObject)['c']['param'] = 0;
			} catch (e) {
				expect(e.message).toEqual("Can't add property param, object is not extensible");
			}
		});

		it('The input array should be frozen and cloned successfully', ()=> {

			const clonedObject = [
				{
					a: 1,
					b: 2,
					c: {
						d: 3,
						e: {
							f: 4,
							g: 'hello world',
							h: true,
							i: [
								{
									a: 1,
									b: 2,
									c: [
										{
											d: 3
										}
									],
									e: null,
									f: undefined
								}
							]
						}
					}
				}
			];

			expect(ImmutableHelper.toClone(clonedObject)).toEqual(clonedObject);
			expect(ImmutableHelper.toImmutable(clonedObject)).toEqual(clonedObject);

			try {
				(ImmutableHelper.toImmutable(clonedObject) as Array<any>).push(0);
			} catch (e) {
				expect(e.message).toEqual("Can't add property 1, object is not extensible");
			}
		});

		it('The input user object should be frozen and cloned successfully', ()=> {

			class Person {
				constructor(private name: string, private id: number) {
				}

				getName(): string {
					return this.name;
				}

				setName(name: string): void {
					this.name = name;
				}
			}

			const clonedPerson: Person = ImmutableHelper.toClone(new Person("Tomas", 123));

			expect(clonedPerson instanceof Person).toBe(true);
			expect(clonedPerson.getName).toEqual(Person.prototype.getName);

			const frozenPerson: Person = ImmutableHelper.toImmutable(new Person("Tomas", 456));

			expect(frozenPerson instanceof Person).toBe(true);
			expect(frozenPerson.getName).toEqual(Person.prototype.getName);

			try {
				frozenPerson.setName('Nelson');
			} catch (e) {
				expect(e.message).toEqual("Cannot assign to read only property 'name' of object '#<Person>'");
			}
		});
	});
});
