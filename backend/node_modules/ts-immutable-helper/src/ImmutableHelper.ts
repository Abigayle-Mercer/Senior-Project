export class ImmutableHelper {

	private static observe(object: any, freeze: boolean) {
		if (typeof object === 'undefined' || object === null) {
			return object;
		}

		let copied;
		if (Array.isArray(object)) {
			copied = [];
			(object as Array<any>).forEach((i: any) => {
				copied.push(ImmutableHelper.observe(i, freeze));
			});
		} else if (typeof object === 'object') {
			copied = Reflect.construct(object.constructor, []);

			for (let i of Object.keys(object)) {
				copied[i] = ImmutableHelper.observe(object[i], freeze);
			}
		} else {
			return object;
		}

		return freeze
			? Object.isFrozen(copied) ? copied : Object.freeze(copied)
			: copied;
	}

	public static toImmutable<TObject>(object: TObject): TObject {
		return ImmutableHelper.observe(object, true) as TObject;
	}

	public static toClone<TObject>(object: TObject): TObject {
		return ImmutableHelper.observe(object, false) as TObject;
	}
}
